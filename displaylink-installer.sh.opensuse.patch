--- displaylink-installer.sh.orig	2016-05-10 12:13:27.000000000 +0200
+++ displaylink-installer.sh	2016-05-17 10:48:23.061600609 +0200
@@ -10,7 +10,15 @@
 
 add_udev_rule()
 {
-  echo 'ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="17e9", ATTR{bNumInterfaces}=="*5", GROUP="plugdev", MODE="0660"' > /etc/udev/rules.d/99-displaylink.rules
+  local UDevRules='ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="17e9", ATTR{bNumInterfaces}=="*5", GROUP="plugdev", MODE="0660"'
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      local UDevRules='ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="17e9", ATTR{bNumInterfaces}=="*5", GROUP="users", MODE="0660"'
+    fi
+  fi
+  echo ${UDevRules} > /etc/udev/rules.d/99-displaylink.rules
   chmod 0644 /etc/udev/rules.d/99-displaylink.rules
 }
 
@@ -96,9 +104,25 @@
   chmod 0644 /etc/init/displaylink.conf
 }
 
+get_systemd_service_file()
+{
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      echo "/etc/systemd/system/displaylink.service"
+      return
+    fi
+  fi
+
+  echo "/lib/systemd/system/displaylink.service"
+  return
+}
+
 add_systemd_service()
 {
-  cat > /lib/systemd/system/displaylink.service <<'EOF'
+  local ServiceFile=$(get_systemd_service_file)
+  cat > ${ServiceFile} <<'EOF'
 [Unit]
 Description=DisplayLink Manager Service
 After=display-manager.service
@@ -116,7 +140,7 @@
 
 EOF
 
-  chmod 0644 /lib/systemd/system/displaylink.service
+  chmod 0644 ${ServiceFile}
   systemctl enable displaylink.service
 }
 
@@ -127,8 +151,24 @@
 
 remove_systemd_service()
 {
+  local ServiceFile=$(get_systemd_service_file)
   systemctl disable displaylink.service
-  rm -f /lib/systemd/system/displaylink.service
+  rm -f ${ServiceFile}
+}
+
+get_pm_script()
+{
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      echo "/usr/lib/systemd/system-sleep/displaylink.sh"
+      return
+    fi
+  fi
+
+  echo "/lib/systemd/system-sleep/displaylink.sh"
+  return
 }
 
 add_pm_script()
@@ -197,14 +237,14 @@
     ln -s $COREDIR/displaylink.sh /etc/pm/sleep.d/displaylink.sh
   elif [ "$1" = "systemd" ]
   then
-    ln -s $COREDIR/displaylink.sh /lib/systemd/system-sleep/displaylink.sh
+    ln -s $COREDIR/displaylink.sh $(get_pm_script)
   fi
 }
 
 remove_pm_scripts()
 {
   rm -f /etc/pm/sleep.d/displaylink.sh
-  rm -f /lib/systemd/system-sleep/displaylink.sh
+  rm -f $(get_pm_script)
 }
 
 cleanup()
@@ -342,7 +382,17 @@
   version_lt "$KVER" "$KVER_MIN" && missing_requirement "Kernel version $KVER is too old. At least $KVER_MIN is required"
 
   # Linux headers
-  [ ! -f "/lib/modules/$KVER/build/Kconfig" ] && missing_requirement "Linux headers for running kernel, $KVER"
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      [ ! -f "/lib/modules/$KVER/build/Makefile" ] && missing_requirement "Linux headers for running kernel, $KVER"
+    else
+      [ ! -f "/lib/modules/$KVER/build/Kconfig" ] && missing_requirement "Linux headers for running kernel, $KVER"
+    fi
+  else
+    [ ! -f "/lib/modules/$KVER/build/Kconfig" ] && missing_requirement "Linux headers for running kernel, $KVER"
+  fi
 }
 
 usage()
@@ -357,19 +407,21 @@
 
 detect_init_daemon()
 {
-    INIT=$(readlink /proc/1/exe)
-    if [ "$INIT" == "/sbin/init" ]; then
-        INIT=$(/sbin/init --version)
-    fi
-
-    [ -z "${INIT##*upstart*}" ] && SYSTEMINITDAEMON="upstart"
-    [ -z "${INIT##*systemd*}" ] && SYSTEMINITDAEMON="systemd"
-
     if [ -z "$SYSTEMINITDAEMON" ]; then
-        echo "ERROR: the installer script is unable to find out how to start DisplayLinkManager service automatically on your system." >&2
-        echo "Please set an environment variable SYSTEMINITDAEMON to 'upstart' or 'systemd' before running the installation script to force one of the options." >&2
-        echo "Installation terminated." >&2
-        exit 1
+        INIT=$(readlink /proc/1/exe)
+        if [ "$INIT" == "/sbin/init" ]; then
+            INIT=$(/sbin/init --version)
+        fi
+
+        [ -z "${INIT##*upstart*}" ] && SYSTEMINITDAEMON="upstart"
+        [ -z "${INIT##*systemd*}" ] && SYSTEMINITDAEMON="systemd"
+
+        if [ -z "$SYSTEMINITDAEMON" ]; then
+            echo "ERROR: the installer script is unable to find out how to start DisplayLinkManager service automatically on your system." >&2
+            echo "Please set an environment variable SYSTEMINITDAEMON to 'upstart' or 'systemd' before running the installation script to force one of the options." >&2
+            echo "Installation terminated." >&2
+            exit 1
+        fi
     fi
 }
 
@@ -377,10 +429,14 @@
 {
   if which lsb_release >/dev/null; then
     local R=$(lsb_release -d -s)
+    local R=${R#\"}
     echo "Distribution discovered: $R"
     [ -z "${R##Ubuntu 14.*}" ] && return
     [ -z "${R##Ubuntu 15.*}" ] && return
     [ -z "${R##Ubuntu 16.04*}" ] && return
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      SYSTEMINITDAEMON="systemd"
+    fi
   else
     echo "WARNING: This is not an officially supported distribution." >&2
     echo "Please use DisplayLink Forum for getting help if you find issues." >&2
